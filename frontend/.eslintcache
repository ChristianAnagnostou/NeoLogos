[{"/Users/christian/Portfolio Projects/phantomnation/frontend/src/index.js":"1","/Users/christian/Portfolio Projects/phantomnation/frontend/src/reportWebVitals.js":"2","/Users/christian/Portfolio Projects/phantomnation/frontend/src/App.js":"3","/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/WordList/Wordlist.js":"4","/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/WordEntryForm/WordEntryForm.js":"5","/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/wordlist/Wordlist.js":"6","/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/wordEntryForm/WordEntryForm.js":"7","/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/userLogin/UserLogin.js":"8","/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/createAccount/CreateAccount.js":"9","/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/wordDetails/WordDetails.js":"10","/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/wordlist/wordVotes/WordVotes.js":"11","/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/heading/Heading.js":"12","/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/home-page/Home.js":"13","/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/recentlyViewed/RecentlyViewed.js":"14","/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/topWords/TopWords.js":"15"},{"size":478,"mtime":1609351281707,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1609347765141,"results":"18","hashOfConfig":"17"},{"size":5276,"mtime":1609731864581,"results":"19","hashOfConfig":"17"},{"size":334,"mtime":1609368854929,"results":"20","hashOfConfig":"17"},{"size":872,"mtime":1609368408284,"results":"21","hashOfConfig":"17"},{"size":1332,"mtime":1609727564497,"results":"22","hashOfConfig":"17"},{"size":2031,"mtime":1609699240704,"results":"23","hashOfConfig":"17"},{"size":1856,"mtime":1609546495872,"results":"24","hashOfConfig":"17"},{"size":2580,"mtime":1609546787113,"results":"25","hashOfConfig":"17"},{"size":481,"mtime":1609691746794,"results":"26","hashOfConfig":"17"},{"size":4406,"mtime":1609732743701,"results":"27","hashOfConfig":"17"},{"size":1556,"mtime":1609631272095,"results":"28","hashOfConfig":"17"},{"size":1290,"mtime":1609805201345,"results":"29","hashOfConfig":"17"},{"size":1073,"mtime":1609805531595,"results":"30","hashOfConfig":"17"},{"size":1008,"mtime":1609812797953,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"659o3z",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/christian/Portfolio Projects/phantomnation/frontend/src/index.js",[],["65","66"],"/Users/christian/Portfolio Projects/phantomnation/frontend/src/reportWebVitals.js",[],"/Users/christian/Portfolio Projects/phantomnation/frontend/src/App.js",["67"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n// React Router\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n// Styles\nimport \"./styles/app.css\";\n// Components\nimport UserLogin from \"./components/userLogin/UserLogin\";\nimport CreateAccount from \"./components/createAccount/CreateAccount\";\nimport WordDetails from \"./components/wordDetails/WordDetails\";\nimport Home from \"./components/home-page/Home\";\n\nfunction App() {\n  const [words, setWords] = useState([]);\n  const [currentUser, setCurrentUser] = useState({});\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  const [upvotedWords, setUpvotedWords] = useState([]);\n  const [downvotedWords, setDownvotedWords] = useState([]);\n\n  // Update all of users upvotes and downvotes\n  const updateUsersWordVotes = async () => {\n    const response = axios.post(`http://localhost:4001/api/users/${currentUser.userId}/votes`, {\n      upvotedWords,\n      downvotedWords,\n    });\n    try {\n      const res = await response;\n      return res;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // Create a new word\n  const postWordData = async (newWordData) => {\n    console.log(\"posting new data\");\n    const response = axios.post(\"http://localhost:4001/api/words\", {\n      newWordData,\n      type: \"post-new-word\",\n    });\n    try {\n      await response;\n      fetchWordData();\n      return true;\n    } catch (e) {\n      if (e.response.status === 400) {\n        return false;\n      } else {\n        console.log(e);\n      }\n    }\n  };\n\n  // Request to login with user email then validate password\n  const handleUserLogin = async (userCreds) => {\n    const response = axios.post(\"http://localhost:4001/api/users/login\", { userCreds });\n    try {\n      const res = await response;\n      if (res.status !== 200) {\n        throw new Error(\"Invalid User Credentials\");\n      } else {\n        setCurrentUser(res.data);\n        setLoggedIn(true);\n        return true;\n      }\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  };\n\n  // Create a new account\n  const handleCreateAccount = async (userCreds) => {\n    const response = axios.post(\"http://localhost:4001/api/users\", { newUser: userCreds });\n    try {\n      const res = await response;\n      setCurrentUser(res.data);\n      setLoggedIn(true);\n      return true;\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  };\n\n  const [visitedWordIds, setVisitedWordIds] = useState([]);\n  // Add a word to a user's visitedWordIds array\n  const handleAddViewedWord = async (wordId) => {\n    if (!visitedWordIds.includes(wordId)) {\n      if (loggedIn) {\n        const response = axios.post(`http://localhost:4001/api/users/${currentUser.userId}`, {\n          wordId,\n        });\n        try {\n          const res = await response;\n          setVisitedWordIds(res.data);\n        } catch (e) {\n          console.log(e);\n        }\n      } else {\n        setVisitedWordIds([...visitedWordIds, wordId]);\n      }\n    }\n  };\n\n  // Get all words from words api\n  const fetchWordData = async () => {\n    console.log(\"fetching new data\");\n    const response = axios.get(\"http://localhost:4001/api/words\");\n    try {\n      const res = await response;\n      setWords(res.data);\n      return true;\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  };\n\n  // Get all the recently viewed words id's for the current user\n  const fetchAllUserData = async () => {\n    const response = axios.get(`http://localhost:4001/api/users/${currentUser.userId}`);\n    try {\n      const res = await response;\n      setCurrentUser(res.data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // Get all votes from the user\n  const fetchAllUserVotes = async () => {\n    const response = axios.get(`http://localhost:4001/api/users/${currentUser.userId}/votes`);\n    try {\n      const res = await response;\n      const { allUpvotedWords, allDownvotedWords } = res.data;\n      setUpvotedWords(allUpvotedWords);\n      setDownvotedWords(allDownvotedWords);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    if (loggedIn) {\n      fetchAllUserData();\n    }\n  }, [loggedIn]);\n\n  useEffect(() => {\n    fetchWordData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home\n              currentUser={currentUser}\n              loggedIn={loggedIn}\n              postWordData={postWordData}\n              words={words}\n              handleAddViewedWord={handleAddViewedWord}\n              visitedWordIds={visitedWordIds}\n              upvotedWords={upvotedWords}\n              setUpvotedWords={setUpvotedWords}\n              downvotedWords={downvotedWords}\n              setDownvotedWords={setDownvotedWords}\n              updateUsersWordVotes={updateUsersWordVotes}\n              fetchAllUserVotes={fetchAllUserVotes}\n            />\n          </Route>\n          <Route path=\"/user-login\">\n            <UserLogin handleUserLogin={handleUserLogin} />\n          </Route>\n          <Route path=\"/create-account\">\n            <CreateAccount handleCreateAccount={handleCreateAccount} />\n          </Route>\n          <WordDetails words={words} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/WordList/Wordlist.js",[],"/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/WordEntryForm/WordEntryForm.js",[],"/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/wordlist/Wordlist.js",[],"/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/wordEntryForm/WordEntryForm.js",[],"/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/userLogin/UserLogin.js",[],"/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/createAccount/CreateAccount.js",[],"/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/wordDetails/WordDetails.js",[],"/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/wordlist/wordVotes/WordVotes.js",["68","69","70","71"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport ForwardOutlinedIcon from \"@material-ui/icons/ForwardOutlined\";\n\nfunction WordVotes({\n  word,\n  loggedIn,\n  upvotedWords,\n  setUpvotedWords,\n  downvotedWords,\n  setDownvotedWords,\n  updateUsersWordVotes,\n  fetchAllUserVotes,\n}) {\n  const [voteCount, setVoteCount] = useState(word.voteCount);\n  const [userUpvotedWord, setUserUpvotedWord] = useState(false);\n  const [userDownvotedWord, setUserDownvotedWord] = useState(false);\n\n  // Get voteCount for specific word\n  const getVoteCount = async () => {\n    const response = axios.get(`http://localhost:4001/api/words/${word.wordId}/votes`);\n    try {\n      const res = await response;\n      return res.data;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // Update vote after clicking vote\n  const updateVote = async () => {\n    const response = axios.put(`http://localhost:4001/api/words/${word.wordId}/votes`, {\n      voteCount,\n    });\n    try {\n      const res = await response;\n      return res.status;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    // Get current votes this word when component mounts\n    const getVotesOnLoad = async () => {\n      const num = await getVoteCount();\n      setVoteCount(num);\n    };\n    getVotesOnLoad();\n  }, []);\n\n  // Call after vote count has been updated\n  useEffect(() => {\n    if (loggedIn) {\n      updateVote();\n    }\n  }, [voteCount]);\n\n  useEffect(() => {\n    // If user has already voted on this this word\n    if (upvotedWords.includes(word.wordId)) {\n      setUserUpvotedWord(true);\n    } else if (downvotedWords.includes(word.wordId)) {\n      setUserDownvotedWord(true);\n    }\n  }, [upvotedWords, downvotedWords]);\n\n  // helper function for handleVoteClick\n  const filterOutCurrentWord = (prevWordIds) => {\n    return prevWordIds.filter((wordId) => wordId !== word.wordId);\n  };\n\n  const handleVoteClick = (direction) => {\n    if (!loggedIn) {\n      console.log(\"no voting unless logged in\");\n    } else {\n      switch (direction) {\n        case \"up\":\n          if (userDownvotedWord) {\n            //if already downvoted, remove the downvote\n            setUserDownvotedWord(false);\n            setDownvotedWords(filterOutCurrentWord);\n            setVoteCount((prevCount) => (prevCount += 1));\n          } else if (userUpvotedWord) {\n            // if already upvoted, remove the upvote and break\n            setUserUpvotedWord(false);\n            setUpvotedWords(filterOutCurrentWord);\n            setVoteCount((prevCount) => (prevCount -= 1));\n            break;\n          }\n          setUserUpvotedWord(true); // add the upvote\n          setUpvotedWords([...upvotedWords, word.wordId]);\n          setVoteCount((prevCount) => (prevCount += 1));\n          break;\n        case \"down\":\n          if (userUpvotedWord) {\n            //if already upvoted, remove the upvote\n            setUserUpvotedWord(false);\n            setUpvotedWords(filterOutCurrentWord);\n            setVoteCount((prevCount) => (prevCount -= 1));\n          } else if (userDownvotedWord) {\n            //if already downvoted, remove the downvote and break\n            setUserDownvotedWord(false);\n            setDownvotedWords(filterOutCurrentWord);\n            setVoteCount((prevCount) => (prevCount += 1));\n            break;\n          }\n          setUserDownvotedWord(true); // add the downvote\n          setDownvotedWords([...downvotedWords, word.wordId]);\n          setVoteCount((prevCount) => (prevCount -= 1));\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  const [alreadyRetrievedFromServer, setaAreadyRetrievedFromServer] = useState(false);\n  useEffect(() => {\n    if (loggedIn) {\n      if (alreadyRetrievedFromServer) {\n        updateUsersWordVotes();\n      } else {\n        fetchAllUserVotes();\n        setaAreadyRetrievedFromServer(true);\n      }\n    }\n  }, [userUpvotedWord, userDownvotedWord, alreadyRetrievedFromServer]);\n\n  return (\n    <div className=\"word-votes\">\n      <ForwardOutlinedIcon\n        className={userUpvotedWord ? \"upvote voted-up\" : \"upvote\"}\n        onClick={() => handleVoteClick(\"up\")}\n      />\n      <span className=\"vote-num\">{voteCount}</span>\n      <ForwardOutlinedIcon\n        className={userDownvotedWord ? \"downvote voted-down\" : \"downvote\"}\n        onClick={() => handleVoteClick(\"down\")}\n      />\n    </div>\n  );\n}\n\nexport default WordVotes;\n","/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/heading/Heading.js",[],"/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/home-page/Home.js",[],"/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/recentlyViewed/RecentlyViewed.js",["72"],"/Users/christian/Portfolio Projects/phantomnation/frontend/src/components/topWords/TopWords.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":149,"column":6,"nodeType":"79","endLine":149,"endColumn":16,"suggestions":"80"},{"ruleId":"77","severity":1,"message":"81","line":50,"column":6,"nodeType":"79","endLine":50,"endColumn":8,"suggestions":"82"},{"ruleId":"77","severity":1,"message":"83","line":57,"column":6,"nodeType":"79","endLine":57,"endColumn":17,"suggestions":"84"},{"ruleId":"77","severity":1,"message":"85","line":66,"column":6,"nodeType":"79","endLine":66,"endColumn":36,"suggestions":"86"},{"ruleId":"77","severity":1,"message":"87","line":128,"column":6,"nodeType":"79","endLine":128,"endColumn":70,"suggestions":"88"},{"ruleId":"77","severity":1,"message":"89","line":24,"column":6,"nodeType":"79","endLine":24,"endColumn":22,"suggestions":"90"},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchAllUserData'. Either include it or remove the dependency array.","ArrayExpression",["93"],"React Hook useEffect has a missing dependency: 'getVoteCount'. Either include it or remove the dependency array.",["94"],"React Hook useEffect has missing dependencies: 'loggedIn' and 'updateVote'. Either include them or remove the dependency array.",["95"],"React Hook useEffect has a missing dependency: 'word.wordId'. Either include it or remove the dependency array.",["96"],"React Hook useEffect has missing dependencies: 'fetchAllUserVotes', 'loggedIn', and 'updateUsersWordVotes'. Either include them or remove the dependency array. If 'updateUsersWordVotes' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["97"],"React Hook useEffect has a missing dependency: 'getWordInfoFromIds'. Either include it or remove the dependency array.",["98"],"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [fetchAllUserData, loggedIn]",{"range":"111","text":"112"},"Update the dependencies array to be: [getVoteCount]",{"range":"113","text":"114"},"Update the dependencies array to be: [loggedIn, updateVote, voteCount]",{"range":"115","text":"116"},"Update the dependencies array to be: [upvotedWords, downvotedWords, word.wordId]",{"range":"117","text":"118"},"Update the dependencies array to be: [userUpvotedWord, userDownvotedWord, alreadyRetrievedFromServer, loggedIn, updateUsersWordVotes, fetchAllUserVotes]",{"range":"119","text":"120"},"Update the dependencies array to be: [getWordInfoFromIds, visitedWordIds]",{"range":"121","text":"122"},[4151,4161],"[fetchAllUserData, loggedIn]",[1317,1319],"[getVoteCount]",[1438,1449],"[loggedIn, updateVote, voteCount]",[1702,1732],"[upvotedWords, downvotedWords, word.wordId]",[3889,3953],"[userUpvotedWord, userDownvotedWord, alreadyRetrievedFromServer, loggedIn, updateUsersWordVotes, fetchAllUserVotes]",[628,644],"[getWordInfoFromIds, visitedWordIds]"]